# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Asset {
  assetClass: String
  createdAt: DateTime!
  departmentId: String
  departmentName: String
  externalId: String!
  id: String!
  name: String
  status: Boolean!
  updatedAt: DateTime!
  user: User
}

input AssetCreateInput {
  assetClass: String
  departmentId: String
  departmentName: String
  externalId: String!
  name: String
  status: Boolean!
  user: UserWhereUniqueInput
}

input AssetCreateNestedManyWithoutUsersInput {
  connect: [AssetWhereUniqueInput!]
}

input AssetListRelationFilter {
  every: AssetWhereInput
  none: AssetWhereInput
  some: AssetWhereInput
}

input AssetOrderByInput {
  assetClass: SortOrder
  createdAt: SortOrder
  departmentId: SortOrder
  departmentName: SortOrder
  externalId: SortOrder
  id: SortOrder
  name: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input AssetUpdateInput {
  assetClass: String
  departmentId: String
  departmentName: String
  externalId: String
  name: String
  status: Boolean
  user: UserWhereUniqueInput
}

input AssetUpdateManyWithoutUsersInput {
  connect: [AssetWhereUniqueInput!]
  disconnect: [AssetWhereUniqueInput!]
  set: [AssetWhereUniqueInput!]
}

input AssetWhereInput {
  assetClass: StringNullableFilter
  departmentId: StringNullableFilter
  departmentName: StringNullableFilter
  externalId: StringFilter
  id: StringFilter
  name: StringNullableFilter
  status: BooleanFilter
  user: UserWhereUniqueInput
}

input AssetWhereUniqueInput {
  id: String!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type MetaQueryPayload {
  count: String!
}

type Mutation {
  createAsset(data: AssetCreateInput!): Asset!
  createTask(data: TaskCreateInput!): Task!
  createUser(data: UserCreateInput!): User!
  createUserDetail(data: UserDetailCreateInput!): UserDetail!
  deleteAsset(where: AssetWhereUniqueInput!): Asset!
  deleteTask(where: TaskWhereUniqueInput!): Task!
  deleteUser(where: UserWhereUniqueInput!): User!
  deleteUserDetail(where: UserDetailWhereUniqueInput!): UserDetail!
  login(credentials: Credentials!): UserInfo!
  signup(credentials: Credentials!): UserInfo!
  updateAsset(data: AssetUpdateInput!, where: AssetWhereUniqueInput!): Asset!
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  updateUserDetail(data: UserDetailUpdateInput!, where: UserDetailWhereUniqueInput!): UserDetail!
}

type Query {
  _assetsMeta(orderBy: [AssetOrderByInput!], skip: Float, take: Float, where: AssetWhereInput): MetaQueryPayload!
  _tasksMeta(orderBy: [TaskOrderByInput!], skip: Float, take: Float, where: TaskWhereInput): MetaQueryPayload!
  _userDetailsMeta(orderBy: [UserDetailOrderByInput!], skip: Float, take: Float, where: UserDetailWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  asset(where: AssetWhereUniqueInput!): Asset
  assets(orderBy: [AssetOrderByInput!], skip: Float, take: Float, where: AssetWhereInput): [Asset!]!
  me: User!
  task(where: TaskWhereUniqueInput!): Task
  tasks(orderBy: [TaskOrderByInput!], skip: Float, take: Float, where: TaskWhereInput): [Task!]!
  user(where: UserWhereUniqueInput!): User
  userDetail(where: UserDetailWhereUniqueInput!): UserDetail
  userDetails(orderBy: [UserDetailOrderByInput!], skip: Float, take: Float, where: UserDetailWhereInput): [UserDetail!]!
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Task {
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  userId: User
}

input TaskCreateInput {
  userId: UserWhereUniqueInput
}

input TaskCreateNestedManyWithoutUsersInput {
  connect: [TaskWhereUniqueInput!]
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

input TaskOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userIdId: SortOrder
}

input TaskUpdateInput {
  userId: UserWhereUniqueInput
}

input TaskUpdateManyWithoutUsersInput {
  connect: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
}

input TaskWhereInput {
  id: StringFilter
  userId: UserWhereUniqueInput
}

input TaskWhereUniqueInput {
  id: String!
}

type User {
  assets(orderBy: [AssetOrderByInput!], skip: Float, take: Float, where: AssetWhereInput): [Asset!]!
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: [String!]!
  tasks(orderBy: [TaskOrderByInput!], skip: Float, take: Float, where: TaskWhereInput): [Task!]!
  updatedAt: DateTime!
  userDetails(orderBy: [UserDetailOrderByInput!], skip: Float, take: Float, where: UserDetailWhereInput): [UserDetail!]!
  username: String!
}

input UserCreateInput {
  assets: AssetCreateNestedManyWithoutUsersInput
  firstName: String
  lastName: String
  password: String!
  roles: [String!]!
  tasks: TaskCreateNestedManyWithoutUsersInput
  userDetails: UserDetailCreateNestedManyWithoutUsersInput
  username: String!
}

type UserDetail {
  createdAt: DateTime!
  id: String!
  lastLogin: DateTime
  updatedAt: DateTime!
  userId: User
}

input UserDetailCreateInput {
  lastLogin: DateTime
  userId: UserWhereUniqueInput
}

input UserDetailCreateNestedManyWithoutUsersInput {
  connect: [UserDetailWhereUniqueInput!]
}

input UserDetailListRelationFilter {
  every: UserDetailWhereInput
  none: UserDetailWhereInput
  some: UserDetailWhereInput
}

input UserDetailOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  lastLogin: SortOrder
  updatedAt: SortOrder
  userIdId: SortOrder
}

input UserDetailUpdateInput {
  lastLogin: DateTime
  userId: UserWhereUniqueInput
}

input UserDetailUpdateManyWithoutUsersInput {
  connect: [UserDetailWhereUniqueInput!]
  disconnect: [UserDetailWhereUniqueInput!]
  set: [UserDetailWhereUniqueInput!]
}

input UserDetailWhereInput {
  id: StringFilter
  lastLogin: DateTimeNullableFilter
  userId: UserWhereUniqueInput
}

input UserDetailWhereUniqueInput {
  id: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  assets: AssetUpdateManyWithoutUsersInput
  firstName: String
  lastName: String
  password: String
  roles: [String!]
  tasks: TaskUpdateManyWithoutUsersInput
  userDetails: UserDetailUpdateManyWithoutUsersInput
  username: String
}

input UserWhereInput {
  assets: AssetListRelationFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  tasks: TaskListRelationFilter
  userDetails: UserDetailListRelationFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
